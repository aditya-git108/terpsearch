# ****************************************************************************************************** #
# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created.
#
# Uses whoan/docker-build-with-cache-action to cache the Docker image to
# speed up build times. Does so by creating a second AWS ECR repo with
# [-stage] at the end to pull cached images from.
#
# Must define the env vars at the top of the file with your specific ones.
#
# Must specify the following GitHub secrets:
#   * AWS_ACCESS_KEY_ID
#   * AWS_SECRET_ACCESS_KEY
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.
# ****************************************************************************************************** #

name: AWS ECS Deploy

on:
  # release:
  #   types: [created]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

env:
  AWS_ECR_REPOSITORY_NAME: terpsearch
  AWS_ECS_CLUSTER_NAME: terpsearch-ecs-cluster
  AWS_ECS_TASK_DEF_FILE_CELERY: terpsearch-celery-task-def.json
  AWS_ECS_TASK_DEF_FILE_FASTAPI: terpsearch-fastapi-task-def.json
  AWS_ECS_TASK_DEF_FILE_FLASK: terpsearch-flask-task-def.json
  AWS_ECS_CONTAINER_NAME_CELERY: celery
  AWS_ECS_CONTAINER_NAME_FASTAPI: fastapi
  AWS_ECS_CONTAINER_NAME_FLASK: flask-app
  AWS_ECS_SERVICE_NAME_CELERY: terpsearch-celery
  AWS_ECS_SERVICE_NAME_FASTAPI: terpsearch-fastapi
  AWS_ECS_SERVICE_NAME_FLASK: terpsearch-flask
  AWS_DEFAULT_REGION: us-east-1
  IMAGE_TAG: ${{ github.sha }}

jobs:

  ### Setup: Build and push Docker images
  setup:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & push Flask image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/terpsearch:flask-${{ github.sha }} -f Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/terpsearch:flask-${{ github.sha }}

      - name: Build & push FastAPI image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/terpsearch:fastapi-${{ github.sha }} \
            -f fastapi_categorizer/Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/terpsearch:fastapi-${{ github.sha }}

      - name: Build & push Celery image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/terpsearch:celery-${{ github.sha }} \
            -f fastapi_categorizer/Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/terpsearch:celery-${{ github.sha }}

  ### Deploy Celery
  deploy-celery:
    name: Deploy Celery to ECS
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Render Celery task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.AWS_ECS_TASK_DEF_FILE_CELERY }}
          container-name: ${{ env.AWS_ECS_CONTAINER_NAME_CELERY }}
          image: ${{ needs.setup.outputs.registry }}/terpsearch:celery-${{ github.sha }}

      - name: Deploy Celery service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          service: ${{ env.AWS_ECS_SERVICE_NAME_CELERY }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true

  ### Deploy FastAPI
  deploy-fastapi:
    name: Deploy FastAPI to ECS
    needs: deploy-celery
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Render FastAPI task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.AWS_ECS_TASK_DEF_FILE_FASTAPI }}
          container-name: ${{ env.AWS_ECS_CONTAINER_NAME_FASTAPI }}
          image: ${{ needs.setup.outputs.registry }}/terpsearch:fastapi-${{ github.sha }}

      - name: Deploy FastAPI service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          service: ${{ env.AWS_ECS_SERVICE_NAME_FASTAPI }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true

  ### Deploy Flask
  deploy-flask:
    name: Deploy Flask to ECS
    needs: deploy-fastapi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Render Flask task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.AWS_ECS_TASK_DEF_FILE_FLASK }}
          container-name: ${{ env.AWS_ECS_CONTAINER_NAME_FLASK }}
          image: ${{ needs.setup.outputs.registry }}/terpsearch:flask-${{ github.sha }}

      - name: Deploy Flask service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          service: ${{ env.AWS_ECS_SERVICE_NAME_FLASK }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true