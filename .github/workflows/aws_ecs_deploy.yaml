# ****************************************************************************************************** #
# This workflow builds and pushes Docker images for the TerpSearch application to Amazon ECR,
# and then deploys updated task definitions to existing ECS services for Flask, FastAPI, and Celery.
#
# The Flask image is built from the root-level Dockerfile, while both FastAPI and Celery containers
# are built from the shared `fastapi_categorizer/Dockerfile`. Each image is tagged with the Git commit SHA
# to ensure traceable deployments and pushed to a shared ECR repository.
#
# The deployment process occurs in a defined sequence to maintain service dependency order:
#   1. Celery is deployed first, ensuring background workers are available.
#   2. FastAPI is deployed next, relying on Celery for task delegation.
#   3. Flask is deployed last as it orchestrates and exposes the frontend interface.
#
# Task definitions are updated with the new image tags using `amazon-ecs-render-task-definition`.
# Then, ECS services are updated in-place using `amazon-ecs-deploy-task-definition`, preserving
# all existing network, load balancer, and security group configurations.
#
# Each deployment step waits for the ECS service to become stable before proceeding to the next.
# This ensures safe rollouts and minimizes the risk of downstream failures due to dependency issues.
#
# Must define the following GitHub secrets:
#   * AWS_ACCESS_KEY_ID
#   * AWS_SECRET_ACCESS_KEY
#
# To use this workflow, make sure to:
#
# 1. Create an ECR repository to store the application images.
#    Example: `aws ecr create-repository --repository-name terpsearch --region us-east-1`
#
# 2. Define ECS task definitions and ECS services manually or through IaC (e.g., Terraform, CloudFormation).
#    Ensure the ECS services are created in your target cluster and point to the correct ALB and subnets.
#
# 3. Store your ECS task definitions in JSON format (e.g., `terpsearch-flask-task-def.json`) in the repo.
#    These should reflect the structure of `aws ecs register-task-definition --generate-cli-skeleton`.
#
# 4. Add the appropriate AWS credentials as GitHub Actions secrets for this workflow to authenticate and deploy.
#
# Note: This workflow assumes the ECS services already exist. It only updates task definitions and does not recreate services.
# ****************************************************************************************************** #

name: AWS ECS Deploy

on:
  # release:
  #   types: [created]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

env:
  AWS_ECR_REPOSITORY_NAME: terpsearch
  AWS_ECS_CLUSTER_NAME: terpsearch-ecs-cluster
  AWS_ECS_TASK_DEF_FILE_CELERY: terpsearch-celery-task-def.json
  AWS_ECS_TASK_DEF_FILE_FASTAPI: terpsearch-fastapi-task-def.json
  AWS_ECS_TASK_DEF_FILE_FLASK: terpsearch-flask-task-def.json
  AWS_ECS_CONTAINER_NAME_CELERY: celery
  AWS_ECS_CONTAINER_NAME_FASTAPI: fastapi
  AWS_ECS_CONTAINER_NAME_FLASK: flask-app
  AWS_ECS_SERVICE_NAME_CELERY: terpsearch-celery
  AWS_ECS_SERVICE_NAME_FASTAPI: terpsearch-fastapi
  AWS_ECS_SERVICE_NAME_FLASK: terpsearch-flask
  AWS_DEFAULT_REGION: us-east-1
  IMAGE_TAG: ${{ github.sha }}

jobs:

  ### Setup: Build and push Docker images
  setup:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Debug registry output
        run: echo "ðŸ“¦ ECR registry is: ${{ steps.login-ecr.outputs.registry }}"

      - name: Build & push Flask image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/terpsearch:flask-${{ github.sha }} -f Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/terpsearch:flask-${{ github.sha }}

      - name: Build & push FastAPI image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/terpsearch:fastapi-${{ github.sha }} \
            -f fastapi_categorizer/Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/terpsearch:fastapi-${{ github.sha }}

      - name: Build & push Celery image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/terpsearch:celery-${{ github.sha }} \
            -f fastapi_categorizer/Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/terpsearch:celery-${{ github.sha }}

  ### Deploy Celery
  deploy-celery:
    name: Deploy Celery to ECS
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Render Celery task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.AWS_ECS_TASK_DEF_FILE_CELERY }}
          container-name: ${{ env.AWS_ECS_CONTAINER_NAME_CELERY }}
          image: ${{ needs.setup.outputs.registry }}/terpsearch:celery-${{ github.sha }}

      - name: Deploy Celery service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          service: ${{ env.AWS_ECS_SERVICE_NAME_CELERY }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true

  ### Deploy FastAPI
  deploy-fastapi:
    name: Deploy FastAPI to ECS
    needs: deploy-celery
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Render FastAPI task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.AWS_ECS_TASK_DEF_FILE_FASTAPI }}
          container-name: ${{ env.AWS_ECS_CONTAINER_NAME_FASTAPI }}
          image: ${{ needs.setup.outputs.registry }}/terpsearch:fastapi-${{ github.sha }}

      - name: Deploy FastAPI service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          service: ${{ env.AWS_ECS_SERVICE_NAME_FASTAPI }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true

  ### Deploy Flask
  deploy-flask:
    name: Deploy Flask to ECS
    needs: deploy-fastapi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Render Flask task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.AWS_ECS_TASK_DEF_FILE_FLASK }}
          container-name: ${{ env.AWS_ECS_CONTAINER_NAME_FLASK }}
          image: ${{ needs.setup.outputs.registry }}/terpsearch:flask-${{ github.sha }}

      - name: Deploy Flask service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          service: ${{ env.AWS_ECS_SERVICE_NAME_FLASK }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true